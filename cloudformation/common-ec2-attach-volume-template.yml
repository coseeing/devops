AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template for attaching EBS volume by name (create if not exists)

Parameters:
  TargetInstanceId:
    Type: String
    Description: EC2 instance ID to attach the volume to (can be from another stack)
  
  VolumeName:
    Type: String
    Description: Name of the EBS volume to attach (will be created if not exists)
    
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Must be the same AZ as the target EC2 instance
    
  VolumeSize:
    Type: Number
    Description: Size of the EBS volume in GB (only used if creating new volume)
    Default: 20
    
  VolumeDevice:
    Type: String
    Description: Device name for the volume
    Default: /dev/sdf

Resources:
  VolumeSearchFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          
          def handler(event, context):
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      ec2 = boto3.client('ec2')
                      volume_name = event['ResourceProperties']['VolumeName']
                      az = event['ResourceProperties']['AvailabilityZone']

                      response = ec2.describe_volumes(
                          Filters=[
                              {'Name': 'tag:Name', 'Values': [volume_name]},
                              {'Name': 'availability-zone', 'Values': [az]},
                              {'Name': 'status', 'Values': ['available']}
                          ]
                      )
                      
                      if response['Volumes']:
                          volume_id = response['Volumes'][0]['VolumeId']
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                              {'VolumeId': volume_id, 'VolumeExists': 'true'})
                      else:
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, 
                              {'VolumeId': '', 'VolumeExists': 'false'})
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              except Exception as e:
                  print(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DescribeVolumes
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVolumes
                Resource: '*'

  VolumeSearch:
    Type: Custom::VolumeSearch
    Properties:
      ServiceToken: !GetAtt VolumeSearchFunction.Arn
      VolumeName: !Ref VolumeName
      AvailabilityZone: !Ref AvailabilityZone

  NewVolume:
    Type: AWS::EC2::Volume
    Condition: CreateNewVolume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: !Ref VolumeSize
      VolumeType: gp3
      Tags:
        - Key: Name
          Value: !Ref VolumeName

Conditions:
  CreateNewVolume: !Equals 
    - !GetAtt VolumeSearch.VolumeExists
    - 'false'

  VolumeAttachment:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: !Ref VolumeDevice
      InstanceId: !Ref TargetInstanceId
      VolumeId: !If 
        - CreateNewVolume
        - !Ref NewVolume
        - !GetAtt VolumeSearch.VolumeId

Outputs:
  VolumeId:
    Description: ID of the EBS volume (either existing or newly created)
    Value: !If
      - CreateNewVolume
      - !Ref NewVolume
      - !GetAtt VolumeSearch.VolumeId
  IsNewVolume:
    Description: Indicates if a new volume was created
    Value: !If
      - CreateNewVolume
      - 'true'
      - 'false'