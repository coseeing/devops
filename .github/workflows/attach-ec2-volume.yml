name: Attach EBS Volume to EC2

on:
  workflow_dispatch:
    inputs:
      stack_name:
        description: "Stack Name"
        required: true
      volume_name:
        description: "Volume Name"
        required: true
      availability_zone:
        description: "Availability Zone"
        required: true
        default: "ap-northeast-1c"
      volume_size:
        description: "Volume Size (GB)"
        required: true
        default: "20"
      volume_device:
        description: "Volume Device Name"
        required: true
        default: "/dev/xvdf"
      source_stack_name:
        description: "Source Stack Name (to get EC2 instance ID)"
        required: true

permissions:
  contents: write
  pull-requests: write

jobs:
  deployment:
    environment: a11y-village-production
    name: attach ebs volume
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_ROLE }}
          aws-region: ap-northeast-1

      - name: Get EC2 Instance ID from source stack
        id: get-instance
        run: |
          INSTANCE_ID=$(aws cloudformation describe-stack-resources \
            --stack-name ${{ github.event.inputs.source_stack_name }} \
            --query "StackResources[?ResourceType=='AWS::EC2::Instance'].PhysicalResourceId" \
            --output text)
          echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
          if [ -z "$INSTANCE_ID" ]; then
            echo "No EC2 instance found in stack ${{ github.event.inputs.source_stack_name }}"
            exit 1
          fi

      - name: Check if volume is already attached
        id: check-volume
        run: |
          VOLUME_ID=$(aws ec2 describe-volumes \
            --filters "Name=tag:Name,Values=${{ github.event.inputs.volume_name }}" \
            --query "Volumes[0].VolumeId" \
            --output text)
          
          if [ "$VOLUME_ID" != "None" ] && [ ! -z "$VOLUME_ID" ]; then
            ATTACHMENT_STATE=$(aws ec2 describe-volumes \
              --volume-ids $VOLUME_ID \
              --query "Volumes[0].Attachments[0].State" \
              --output text)
            
            if [ "$ATTACHMENT_STATE" = "attached" ]; then
              echo "Volume ${{ github.event.inputs.volume_name }} is already attached"
              echo "skip_deployment=true" >> $GITHUB_OUTPUT
            else
              echo "Volume exists but not attached"
              echo "skip_deployment=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Volume does not exist"
            echo "skip_deployment=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy CloudFormation stack
        if: steps.check-volume.outputs.skip_deployment != 'true'
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ github.event.inputs.stack_name }}
          template: cloudformation/common-ec2-attach-volume-template.yml
          parameter-overrides: >-
            VolumeName=${{ github.event.inputs.volume_name }},
            AvailabilityZone=${{ github.event.inputs.availability_zone }},
            VolumeSize=${{ github.event.inputs.volume_size }},
            VolumeDevice=${{ github.event.inputs.volume_device }},
            TargetInstanceId=${{ steps.get-instance.outputs.instance_id }}
          no-fail-on-empty-changeset: "1"
